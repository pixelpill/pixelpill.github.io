
<!DOCTYPE html>
<html>

<head>
	<title>Hello World in 100 Languages</title>
</head>

<body>
	<strong>Python: print("Hello, World!")</strong><br>
	<hr>
	<strong>JavaScript: console.log("Hello, World!");</strong><br>
	<hr>
	<strong>C: #include &lt;stdio.h&gt; int main() { printf("Hello, World!\n"); return 0; }</strong><br>
	<hr>
	<strong>Java: public class HelloWorld { public static void main(String[] args) { System.out.println("Hello, World!"); } }</strong><br>
	<hr>
	<strong>HTML: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; Hello, World! &lt;/body&gt; &lt;/html&gt;</strong><br>
	<hr>
	<strong>LOLCODE: HAI 1.2 VISIBLE "HELLO WORLD!" KTHXBYE</strong><br>
	<hr>
	<strong>Rust: fn main() { println!("Hello, World!"); }</strong><br>
	<hr>
	<strong>Go: package main import "fmt" func main() { fmt.Println("Hello, World!") }</strong><br>
	<hr>
	<strong>Ruby: puts "Hello, World!"</strong><br>
	<hr>
	<strong>Swift: print("Hello, World!")</strong><br>
	<hr>
	<strong>Kotlin: fun main() { println("Hello, World!") }</strong><br>
	<hr>
	<strong>Perl: print "Hello, World!\n";</strong><br>
	<hr>
	<strong>R: cat("Hello, World!\n")</strong><br>
	<hr>
	<strong>Haskell: main = putStrLn "Hello, World!"</strong><br>
	<hr>
	<strong>TypeScript: console.log("Hello, World!");</strong><br>
	<hr>
	<strong>PHP: &lt;?php echo "Hello, World!"; ?&gt;</strong><br>
	<hr>
	<strong>Scala: object HelloWorld { def main(args: Array[String]): Unit = { println("Hello, World!") } }</strong><br>
	<hr>
	<strong>Lua: print("Hello, World!")</strong><br>
	<hr>
	<strong>Elixir: IO.puts "Hello, World!"</strong><br>
	<hr>
	<strong>Clojure: (println "Hello, World!")</strong><br>
	<hr>
	<strong>Dart: void main() { print('Hello, World!'); }</strong><br>
	<hr>
	<strong>Fortran: program hello print *, "Hello, World!" end program hello</strong><br>
	<hr>
	<strong>COBOL: IDENTIFICATION DIVISION. PROGRAM-ID. HELLO-WORLD. PROCEDURE DIVISION. DISPLAY "Hello, World!". STOP RUN.</strong><br>
	<hr>
	<strong>Pascal: program HelloWorld; begin writeln('Hello, World!'); end.</strong><br>
	<hr>
	<strong>F#: printfn "Hello, World!"</strong><br>
	<hr>
	<strong>VB.NET: Module Hello Sub Main() Console.WriteLine("Hello, World!") End Sub End Module</strong><br>
	<hr>
	<strong>Groovy: println 'Hello, World!'</strong><br>
	<hr>
	<strong>Smalltalk: Transcript show: 'Hello, World!'.</strong><br>
	<hr>
	<strong>Scheme: (display "Hello, World!")</strong><br>
	<hr>
	<strong>Prolog: :- write('Hello, World!').</strong><br>
	<hr>
	<strong>Erlang: -module(hello). -export([start/0]). start() -> io:format("Hello, World!~n").</strong><br>
	<hr>
	<strong>Julia: println("Hello, World!")</strong><br>
	<hr>
	<strong>V: println('Hello, World!')</strong><br>
	<hr>
	<strong>Nim: echo "Hello, World!"</strong><br>
	<hr>
	<strong>Crystal: puts "Hello, World!"</strong><br>
	<hr>
	<strong>Hack: &lt;?hh echo "Hello, World!"; ?&gt;</strong><br>
	<hr>
	<strong>REXX: say "Hello, World!"</strong><br>
	<hr>
	<strong>PowerShell: Write-Output "Hello, World!"</strong><br>
	<hr>
	<strong>Bash: echo "Hello, World!"</strong><br>
	<hr>
	<strong>Zsh: echo "Hello, World!"</strong><br>
	<hr>
	<strong>Fish: echo "Hello, World!"</strong><br>
	<hr>
	<strong>Makefile: all: echo "Hello, World!"</strong><br>
	<hr>
	<strong>Batch: @echo Hello, World!</strong><br>
	<hr>
	<strong>Windows CMD: echo Hello, World!</strong><br>
	<hr>
	<strong>Brainf*ck: +[----->+++<]>+.---.+++++++..+++.------------.>++++++.<++++++++.--------.+++.------.--------.</strong><br>
	<hr>
	<strong>Whitespace: [invisible code]</strong><br>
	<hr>
	<strong>Assembly (NASM): section .data msg db "Hello, World!", 0Ah section .text global _start _start: mov edx, 13 mov ecx, msg mov ebx, 1 mov eax, 4 int 0x80 mov eax, 1 int 0x80</strong><br>
	<hr>
	<strong>Assembly (ARM): .data msg: .asciz "Hello, World!" .text .global _start _start: ldr r0, =msg bl printf</strong><br>
	<hr>
	<strong>Assembly (MIPS): .data msg: .asciiz "Hello, World!" .text main: li $v0, 4 la $a0, msg syscall</strong><br>
	<hr>
	<strong>Assembly (RISC-V): .data msg: .asciz "Hello, World!" .text main: li a7, 4 la a0, msg ecall</strong><br>
	<hr>
	<strong>Assembly (SPARC): .section ".data" msg: .asciz "Hello, World!" .section ".text" .global main main: set msg, %o0 call printf</strong><br>
	<hr>
	<strong>Assembly (6502): LDX #0 LDY #0 LDA #"H" JSR $FFD2</strong><br>
	<hr>
	<strong>Assembly (Z80): LD A,"H" CALL $0010</strong><br>
	<hr>
	<strong>Assembly (PDP-11): MOV #msg, R1 CALL #PUTS</strong><br>
	<hr>
	<strong>Assembly (Motorola 68000): MOVE.L #msg,D1 BSR PRINT</strong><br>
	<hr>
	<strong>Assembly (TMS9900): LI R1,msg BLWP @PUTS</strong><br>
	<hr>
	<strong>Assembly (PIC): MOVLW "H" CALL PrintChar</strong><br>
	<hr>
	<strong>Assembly (AVR): LDI R16, 'H' RCALL PrintChar</strong><br>
	<hr>
	<strong>Assembly (8051): MOV A,#'H' LCALL PRINT</strong><br>
	<hr>
	<strong>Assembly (VAX): MOVL #msg, R1 CALLS #1, PUTS</strong><br>
	<hr>
	<strong>Assembly (Itanium): MOV r32 = @msg BR.CALL.SPTK b0 = puts</strong><br>
	<hr>
	<strong>Assembly (PowerPC): li r3, msg bl printf</strong><br>
	<hr>
	<strong>Assembly (Alpha): lda $16, msg jsr puts</strong><br>
	<hr>
	<strong>Assembly (x86 DOS): mov ah, 09h mov dx, offset msg int 21h</strong><br>
	<hr>
	<strong>Assembly (x86 BIOS): mov ah, 0Eh mov al, 'H' int 10h</strong><br>
	<hr>
	<strong>Assembly (x86 UEFI): mov rdi, msg call Print</strong><br>
	<hr>
	<strong>Assembly (x86 EFI): mov rdi, msg call EfiPrint</strong><br>
	<hr>
	<strong>VHDL: architecture behavior of hello is begin process begin report "Hello, World!"; wait; end process; end behavior;</strong><br>
	<hr>
	<strong>Verilog: initial begin $display("Hello, World!"); end</strong><br>
	<hr>
	<strong>OCaml: print_endline "Hello, World!"</strong><br>
	<hr>
	<strong>ML: print "Hello, World!\n";</strong><br>
	<hr>
	<strong>Shakespeare: The world is a stage. Romeo, speak your mind. Romeo: Hello, World!</strong><br>
	<hr>
	<strong>Chef: Hello World Cake with Chocolate Sauce</strong><br>
	<hr>
	<strong>Piet: [abstract image-based code]</strong><br>
	<hr
